{"ast":null,"code":"import { ɵɵdefineInjectable, ɵɵinject, PLATFORM_ID, Injectable, Inject, InjectionToken } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT } from '@angular/common'; // This service is based on the `ng2-cookies` package which sadly is not a service and does\n\nimport * as ɵngcc0 from '@angular/core';\n\nclass CookieService {\n  constructor( // The type `Document` may not be used here. Although a fix is on its way,\n  // we will go with `any` for now to support Angular 2.4.x projects.\n  // Issue: https://github.com/angular/angular/issues/12631\n  // Fix: https://github.com/angular/angular/pull/14894\n  document, // Get the `PLATFORM_ID` so we can check if we're in a browser.\n  platformId) {\n    this.document = document;\n    this.platformId = platformId;\n    this.documentIsAccessible = isPlatformBrowser(this.platformId);\n  }\n  /**\n   * @param name Cookie name\n   * @returns boolean - whether cookie with specified name exists\n   */\n\n\n  check(name) {\n    if (!this.documentIsAccessible) {\n      return false;\n    }\n\n    name = encodeURIComponent(name);\n    const regExp = this.getCookieRegExp(name);\n    const exists = regExp.test(this.document.cookie);\n    return exists;\n  }\n  /**\n   * @param name Cookie name\n   * @returns property value\n   */\n\n\n  get(name) {\n    if (this.documentIsAccessible && this.check(name)) {\n      name = encodeURIComponent(name);\n      const regExp = this.getCookieRegExp(name);\n      const result = regExp.exec(this.document.cookie);\n      return this.safeDecodeURIComponent(result[1]);\n    } else {\n      return '';\n    }\n  }\n  /**\n   * @returns all the cookies in json\n   */\n\n\n  getAll() {\n    if (!this.documentIsAccessible) {\n      return {};\n    }\n\n    const cookies = {};\n    const document = this.document;\n\n    if (document.cookie && document.cookie !== '') {\n      document.cookie.split(';').forEach(currentCookie => {\n        const [cookieName, cookieValue] = currentCookie.split('=');\n        cookies[this.safeDecodeURIComponent(cookieName.replace(/^ /, ''))] = this.safeDecodeURIComponent(cookieValue);\n      });\n    }\n\n    return cookies;\n  }\n\n  set(name, value, expiresOrOptions, path, domain, secure, sameSite) {\n    if (!this.documentIsAccessible) {\n      return;\n    }\n\n    if (typeof expiresOrOptions === 'number' || expiresOrOptions instanceof Date || path || domain || secure || sameSite) {\n      const optionsBody = {\n        expires: expiresOrOptions,\n        path,\n        domain,\n        secure,\n        sameSite: sameSite ? sameSite : 'Lax'\n      };\n      this.set(name, value, optionsBody);\n      return;\n    }\n\n    let cookieString = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n    const options = expiresOrOptions ? expiresOrOptions : {};\n\n    if (options.expires) {\n      if (typeof options.expires === 'number') {\n        const dateExpires = new Date(new Date().getTime() + options.expires * 1000 * 60 * 60 * 24);\n        cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n      } else {\n        cookieString += 'expires=' + options.expires.toUTCString() + ';';\n      }\n    }\n\n    if (options.path) {\n      cookieString += 'path=' + options.path + ';';\n    }\n\n    if (options.domain) {\n      cookieString += 'domain=' + options.domain + ';';\n    }\n\n    if (options.secure === false && options.sameSite === 'None') {\n      options.secure = true;\n      console.warn(`[ngx-cookie-service] Cookie ${name} was forced with secure flag because sameSite=None.` + `More details : https://github.com/stevermeister/ngx-cookie-service/issues/86#issuecomment-597720130`);\n    }\n\n    if (options.secure) {\n      cookieString += 'secure;';\n    }\n\n    if (!options.sameSite) {\n      options.sameSite = 'Lax';\n    }\n\n    cookieString += 'sameSite=' + options.sameSite + ';';\n    this.document.cookie = cookieString;\n  }\n  /**\n   * @param name   Cookie name\n   * @param path   Cookie path\n   * @param domain Cookie domain\n   */\n\n\n  delete(name, path, domain, secure, sameSite = 'Lax') {\n    if (!this.documentIsAccessible) {\n      return;\n    }\n\n    const expiresDate = new Date('Thu, 01 Jan 1970 00:00:01 GMT');\n    this.set(name, '', {\n      expires: expiresDate,\n      path,\n      domain,\n      secure,\n      sameSite\n    });\n  }\n  /**\n   * @param path   Cookie path\n   * @param domain Cookie domain\n   */\n\n\n  deleteAll(path, domain, secure, sameSite = 'Lax') {\n    if (!this.documentIsAccessible) {\n      return;\n    }\n\n    const cookies = this.getAll();\n\n    for (const cookieName in cookies) {\n      if (cookies.hasOwnProperty(cookieName)) {\n        this.delete(cookieName, path, domain, secure, sameSite);\n      }\n    }\n  }\n  /**\n   * @param name Cookie name\n   * @returns property RegExp\n   */\n\n\n  getCookieRegExp(name) {\n    const escapedName = name.replace(/([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/gi, '\\\\$1');\n    return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\n  }\n\n  safeDecodeURIComponent(encodedURIComponent) {\n    try {\n      return decodeURIComponent(encodedURIComponent);\n    } catch (_a) {\n      // probably it is not uri encoded. return as is\n      return encodedURIComponent;\n    }\n  }\n\n}\n\nCookieService.ɵfac = function CookieService_Factory(t) {\n  return new (t || CookieService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID));\n};\n\nCookieService.ɵprov = ɵɵdefineInjectable({\n  factory: function CookieService_Factory() {\n    return new CookieService(ɵɵinject(DOCUMENT), ɵɵinject(PLATFORM_ID));\n  },\n  token: CookieService,\n  providedIn: \"root\"\n});\n\nCookieService.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: InjectionToken,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CookieService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc0.InjectionToken,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, null);\n})();\n/*\n * Public API Surface of ngx-cookie-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CookieService };","map":{"version":3,"names":["ɵɵdefineInjectable","ɵɵinject","PLATFORM_ID","Injectable","Inject","InjectionToken","isPlatformBrowser","DOCUMENT","ɵngcc0","CookieService","constructor","document","platformId","documentIsAccessible","check","name","encodeURIComponent","regExp","getCookieRegExp","exists","test","cookie","get","result","exec","safeDecodeURIComponent","getAll","cookies","split","forEach","currentCookie","cookieName","cookieValue","replace","set","value","expiresOrOptions","path","domain","secure","sameSite","Date","optionsBody","expires","cookieString","options","dateExpires","getTime","toUTCString","console","warn","delete","expiresDate","deleteAll","hasOwnProperty","escapedName","RegExp","encodedURIComponent","decodeURIComponent","_a","ɵfac","CookieService_Factory","t","ɵprov","factory","token","providedIn","ctorParameters","type","undefined","decorators","args","ngDevMode","ɵsetClassMetadata"],"sources":["C:/Users/SystemForLinux/Desktop/f2/code/pinturillo/frontend/node_modules/ngx-cookie-service/__ivy_ngcc__/fesm2015/ngx-cookie-service.js"],"sourcesContent":["import { ɵɵdefineInjectable, ɵɵinject, PLATFORM_ID, Injectable, Inject, InjectionToken } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT } from '@angular/common';\n\n// This service is based on the `ng2-cookies` package which sadly is not a service and does\nimport * as ɵngcc0 from '@angular/core';\nclass CookieService {\n    constructor(\n    // The type `Document` may not be used here. Although a fix is on its way,\n    // we will go with `any` for now to support Angular 2.4.x projects.\n    // Issue: https://github.com/angular/angular/issues/12631\n    // Fix: https://github.com/angular/angular/pull/14894\n    document, \n    // Get the `PLATFORM_ID` so we can check if we're in a browser.\n    platformId) {\n        this.document = document;\n        this.platformId = platformId;\n        this.documentIsAccessible = isPlatformBrowser(this.platformId);\n    }\n    /**\n     * @param name Cookie name\n     * @returns boolean - whether cookie with specified name exists\n     */\n    check(name) {\n        if (!this.documentIsAccessible) {\n            return false;\n        }\n        name = encodeURIComponent(name);\n        const regExp = this.getCookieRegExp(name);\n        const exists = regExp.test(this.document.cookie);\n        return exists;\n    }\n    /**\n     * @param name Cookie name\n     * @returns property value\n     */\n    get(name) {\n        if (this.documentIsAccessible && this.check(name)) {\n            name = encodeURIComponent(name);\n            const regExp = this.getCookieRegExp(name);\n            const result = regExp.exec(this.document.cookie);\n            return this.safeDecodeURIComponent(result[1]);\n        }\n        else {\n            return '';\n        }\n    }\n    /**\n     * @returns all the cookies in json\n     */\n    getAll() {\n        if (!this.documentIsAccessible) {\n            return {};\n        }\n        const cookies = {};\n        const document = this.document;\n        if (document.cookie && document.cookie !== '') {\n            document.cookie.split(';').forEach((currentCookie) => {\n                const [cookieName, cookieValue] = currentCookie.split('=');\n                cookies[this.safeDecodeURIComponent(cookieName.replace(/^ /, ''))] = this.safeDecodeURIComponent(cookieValue);\n            });\n        }\n        return cookies;\n    }\n    set(name, value, expiresOrOptions, path, domain, secure, sameSite) {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        if (typeof expiresOrOptions === 'number' || expiresOrOptions instanceof Date || path || domain || secure || sameSite) {\n            const optionsBody = {\n                expires: expiresOrOptions,\n                path,\n                domain,\n                secure,\n                sameSite: sameSite ? sameSite : 'Lax',\n            };\n            this.set(name, value, optionsBody);\n            return;\n        }\n        let cookieString = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n        const options = expiresOrOptions ? expiresOrOptions : {};\n        if (options.expires) {\n            if (typeof options.expires === 'number') {\n                const dateExpires = new Date(new Date().getTime() + options.expires * 1000 * 60 * 60 * 24);\n                cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n            }\n            else {\n                cookieString += 'expires=' + options.expires.toUTCString() + ';';\n            }\n        }\n        if (options.path) {\n            cookieString += 'path=' + options.path + ';';\n        }\n        if (options.domain) {\n            cookieString += 'domain=' + options.domain + ';';\n        }\n        if (options.secure === false && options.sameSite === 'None') {\n            options.secure = true;\n            console.warn(`[ngx-cookie-service] Cookie ${name} was forced with secure flag because sameSite=None.` +\n                `More details : https://github.com/stevermeister/ngx-cookie-service/issues/86#issuecomment-597720130`);\n        }\n        if (options.secure) {\n            cookieString += 'secure;';\n        }\n        if (!options.sameSite) {\n            options.sameSite = 'Lax';\n        }\n        cookieString += 'sameSite=' + options.sameSite + ';';\n        this.document.cookie = cookieString;\n    }\n    /**\n     * @param name   Cookie name\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     */\n    delete(name, path, domain, secure, sameSite = 'Lax') {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        const expiresDate = new Date('Thu, 01 Jan 1970 00:00:01 GMT');\n        this.set(name, '', { expires: expiresDate, path, domain, secure, sameSite });\n    }\n    /**\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     */\n    deleteAll(path, domain, secure, sameSite = 'Lax') {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        const cookies = this.getAll();\n        for (const cookieName in cookies) {\n            if (cookies.hasOwnProperty(cookieName)) {\n                this.delete(cookieName, path, domain, secure, sameSite);\n            }\n        }\n    }\n    /**\n     * @param name Cookie name\n     * @returns property RegExp\n     */\n    getCookieRegExp(name) {\n        const escapedName = name.replace(/([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/gi, '\\\\$1');\n        return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\n    }\n    safeDecodeURIComponent(encodedURIComponent) {\n        try {\n            return decodeURIComponent(encodedURIComponent);\n        }\n        catch (_a) {\n            // probably it is not uri encoded. return as is\n            return encodedURIComponent;\n        }\n    }\n}\nCookieService.ɵfac = function CookieService_Factory(t) { return new (t || CookieService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID)); };\nCookieService.ɵprov = ɵɵdefineInjectable({ factory: function CookieService_Factory() { return new CookieService(ɵɵinject(DOCUMENT), ɵɵinject(PLATFORM_ID)); }, token: CookieService, providedIn: \"root\" });\nCookieService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: InjectionToken, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CookieService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.InjectionToken, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }]; }, null); })();\n\n/*\n * Public API Surface of ngx-cookie-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CookieService };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}